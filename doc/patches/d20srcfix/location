act.informative.c:    for (aff = k->affected; aff; aff = aff->next) {
act.informative.c:      sprintf(duration, "%-3d rounds", aff->duration + 1);
act.informative.c:      sprintf(modifier, "%+d to %s", aff->modifier, apply_text[(int) aff->location]);
act.informative.c:      sprintf(bitvector, "sets %s", affected_bits[aff->bitvector]);
act.informative.c:      send_to_char(k, "@w%-25s %-5d %-10s %-25s %-17s\r\n@n", skill_name(aff->type), aff->level, duration, modifier, bitvector);
act.informative.c:    for (aff = k->affectedv; aff; aff = aff->next) {
act.informative.c:      sprintf(duration, "%-3d rounds", aff->duration + 1);
act.informative.c:      sprintf(modifier, "%+d to %s", aff->modifier, apply_text[(int) aff->location]);
act.informative.c:      sprintf(bitvector, "sets %s", affected_bits[aff->bitvector]);
act.informative.c:      send_to_char(k, "@w%-25s %-10s %-25s %-17s\r\n@n", skill_name(aff->type), duration, modifier, bitvector);
act.wizard.c:    for (aff = k->affected; aff; aff = aff->next) {
act.wizard.c:      send_to_char(ch, "SPL: (%3dhr) @c%-21s@n ", aff->duration + 1, skill_name(aff->type));
act.wizard.c:      if (aff->modifier)
act.wizard.c:	send_to_char(ch, "%+d to %s", aff->modifier, apply_types[(int) aff->location]);
act.wizard.c:      if (aff->bitvector) {
act.wizard.c:	if (aff->modifier)
act.wizard.c:	strcpy(buf, affected_bits[aff->bitvector]);
act.wizard.c:    for (aff = k->affectedv; aff; aff = aff->next) {
act.wizard.c:      send_to_char(ch, "SPL: (%3d rounds) @c%-21s@n ", aff->duration + 1, skill_name(aff->type));
act.wizard.c:      if (aff->modifier)
act.wizard.c:        send_to_char(ch, "%+d to %s", aff->modifier, apply_types[(int) aff->location]);
act.wizard.c:      if (aff->bitvector) {
act.wizard.c:        if (aff->modifier)
act.wizard.c:        strcpy(buf, affected_bits[aff->bitvector]);
act.wizard.c:      for (; aff; aff = aff->next) {
act.wizard.c:        j += snprintf(strp + j, k - j, "SPL: (%3d%s) @c%-21s@n ", aff->duration + 1,
act.wizard.c:                      (l == 15) ? "hr" : "rd", skill_name(aff->type));
act.wizard.c:        if (aff->modifier)
act.wizard.c:          j += snprintf(strp + j, k - j, "%+d to %s", aff->modifier,
act.wizard.c:                        apply_types[(int) aff->location]);
act.wizard.c:        if (aff->bitvector) {
act.wizard.c:          if (aff->modifier)
act.wizard.c:          strcpy(field, affected_bits[aff->bitvector]);
backup/treasure.c:    sprintf(keywords, "staff-%s", spell_info[spellnum].name);
genmob.c:    for (aff = mob->affected; aff; aff = aff->next)
genmob.c:      if (aff->type)
genmob.c:        fprintf(fd, "E\nAffect: %d %d %d %d %d %d\n", aff->type, aff->duration,
genmob.c:                aff->modifier, aff->location, (int)aff->bitvector, aff->specific);
genmob.c:    for (aff = mob->affectedv; aff; aff = aff->next)
genmob.c:      if (aff->type)
genmob.c:        fprintf(fd, "E\nAffectV: %d %d %d %d %d %d\n", aff->type, aff->duration,
genmob.c:                aff->modifier, aff->location, (int)aff->bitvector, aff->specific);
players.c:      aff = aff->next;
players.c:      aff = aff->next;
players.c:  if ((i >= MAX_AFFECT) && aff && aff->next)
players.c:    if (aff->type)
players.c:      fprintf(fl, "%d %d %d %d %d %d %d\n", aff->type, aff->duration,
players.c:      aff->modifier, aff->location, (int)aff->bitvector, aff->specific, aff->level);
players.c:    if (aff->type)
players.c:      fprintf(fl, "%d %d %d %d %d %d %d\n", aff->type, aff->duration,
players.c:        aff->modifier, aff->location, (int)aff->bitvector, aff->specific, aff->level);
spells.c:      sprintf(buf, "staff-%s", keyw);
Binary file spells.o matches
sqlcommon.c:				sprintf(buf+strlen(buf), "%s%ld,%d,%d,%d,%d,%ld)", aff==ch->affected ? "(" : ",(", GET_IDNUM(ch), aff->type, aff->duration, aff->modifier, aff->location, aff->bitvector);
sqlcommon.c:      				aff=aff->next;
treasure.c:    sprintf(keywords, "staff-%s", spell_info[spellnum].name);
Binary file treasure.o matches
util/plrtoascii.c:      if (aff->type)
util/plrtoascii.c:	fprintf(outfile, "%d %d %d %d %d\n", aff->type, aff->duration,
util/plrtoascii.c:	  aff->modifier, aff->location, (int)aff->bitvector);
util/.svn/text-base/plrtoascii.c.svn-base:      if (aff->type)
util/.svn/text-base/plrtoascii.c.svn-base:	fprintf(outfile, "%d %d %d %d %d\n", aff->type, aff->duration,
util/.svn/text-base/plrtoascii.c.svn-base:	  aff->modifier, aff->location, (int)aff->bitvector);
