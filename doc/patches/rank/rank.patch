diff -BbuprN -x '*.o' oldsrc/act.informative.c src/act.informative.c
--- oldsrc/act.informative.c	2007-11-28 18:05:30.000000000 -0800
+++ src/act.informative.c	2008-01-15 02:18:02.843750000 -0800
@@ -87,6 +88,10 @@ void look_in_direction(struct char_data 
 void look_in_obj(struct char_data *ch, char *arg);
 char *find_exdesc(char *word, struct extra_descr_data *list);
 void look_at_target(struct char_data *ch, char *arg);
+void swap_rank_data(struct rank_data *r1, struct rank_data *r2);
+int find_index(char *name, struct rank_data array[], int size);
+int better_rank(struct rank_data rank1, struct rank_data rank2);
+void sort_rank_data_array(struct rank_data *array, int length);
 
 /* local globals */
 int *cmd_sort_info;
@@ -2237,3 +2244,197 @@ void add_history(struct char_data *ch, c
   if (type != HIST_ALL)
     add_history(ch, str, HIST_ALL);
 }
+
+void swap_rank_data(struct rank_data *r1, struct rank_data *r2)
+{
+  struct rank_data *r3;
+
+  CREATE(r3, struct rank_data, 1);
+
+  sprintf(r3->name, "%s", r1->name);
+  r3->level = r1->level;
+  r3->chclass = r1->chclass;
+  
+  sprintf(r1->name, "%s", r2->name);
+  r1->level = r2->level;
+  r1->chclass = r2->chclass;
+  
+  sprintf(r2->name, "%s", r3->name);
+  r2->level = r3->level;
+  r2->chclass = r3->chclass;
+  
+  free(r3);
+}
+
+/* Bubble sort is lame -- Sorry! */
+void sort_rank_data_array(struct rank_data *array, int length)
+{
+  int sorted, i;
+
+  do {
+
+    sorted = TRUE;
+
+    for (i = 0;i < length - 1;i++) {
+      if (better_rank(array[i], array[i+1])) {
+        sorted = FALSE;
+        swap_rank_data(&array[i], &array[i+1]);
+      }
+    }
+
+  } while(!sorted);
+}
+
+/* Here is where you can get fancy and make the comparison as
+ * complicated as you like. 
+ *
+ * Be sure to return:
+ * 
+ * -   >  0  -  if you want to put rank1 ahead
+ * -   <  0  -  if you want to put rank2 ahead
+ * -   =  0  -  if they are equal (their ID number will decide) */
+
+int better_rank(struct rank_data rank1, struct rank_data rank2)
+{
+  /* Level is our primary concern. */
+  if (rank1.level != rank2.level)
+    return rank1.level - rank2.level;
+
+  /* Next we check their experience. */
+  if (rank1.exp != rank2.exp)
+    return rank1.exp - rank2.exp;
+
+  /* Gold is the tie-breaker. */
+  if (rank1.gold != rank2.gold)
+    return rank1.gold - rank2.gold;
+
+  /* Keep doing further checks if you like.  In order of
+   * decreasing importance.  Otherwise, we can call it a
+   * tie here. */
+  return 0;
+}
+
+int find_index(char *name, struct rank_data array[], int size)
+{
+  int i;
+
+  for (i = 0;i < size;i++)
+    if (isname(name, array[i].name))
+      return i;
+
+  return -1;
+}
+
+/* Just to be safe. */
+
+#define RANK_TOSHOW  ( (CONFIG_RANK_LENGTH > 0) ? CONFIG_RANK_LENGTH : 1 )
+
+/* Sneaky little shifting check.  Used to add either 1 or 0. */
+#define TOP_IS_EVEN    (!(RANK_TOSHOW % 2))
+
+ACMD(do_rank)
+{
+  extern int top_of_p_table;
+  extern struct player_index_element *player_table;
+  struct char_data *tch = NULL;
+  int i = 0,j = 0, pivot = 0, topten = 0;
+  struct rank_data *array;
+  char arg[MAX_STRING_LENGTH];
+
+  one_argument(argument, arg);
+
+  /* We need a dummy character to load each player file into. */
+  CREATE(tch, struct char_data, 1);
+  clear_char(tch);
+  CREATE(tch->player_specials, struct player_special_data, 1);
+
+  /* We also need a rank array to store their scores. */
+  CREATE(array, struct rank_data, top_of_p_table + 1);
+
+  /* Initialize to sentinel values. */
+  for (j = 0;j <= top_of_p_table;j++) {
+    sprintf(array[j].name, "BUG -- Please REPORT!");
+    array[j].level = -1;
+    array[j].chclass = CLASS_UNDEFINED;
+    array[j].exp = -1;
+    array[j].gold = -1;
+  };
+
+  j = 0; 
+
+  /* First copy the player index to our rank storage array. */
+
+  for (i = 0;i <= top_of_p_table;i++) {
+
+    /* Load the details for this character. */
+    if (load_char(player_table[i].name, tch) == -1) {
+      
+      /* If we can't load their playerfile, then they don't count. */
+      continue;
+    }
+
+    /* Immortals don't count either! */
+    if (GET_LEVEL(tch) >= LVL_IMMORT) {
+      continue;
+    }
+
+    /* Otherwise, we loaded, so record the data. */
+    sprintf(array[j].name, "%s", GET_NAME(tch));
+    array[j].level = GET_LEVEL(tch);
+    array[j].chclass = GET_CLASS(tch);
+    array[j].exp = GET_EXP(tch);
+    array[j].gold = GET_GOLD(tch) + GET_BANK_GOLD(tch);    
+    j++;
+  }
+
+  /* Now sort it! */
+  sort_rank_data_array(array, j);
+
+  /* Assume they entered no argument for now. */
+  pivot = find_index(GET_NAME(ch), array, j);
+
+  /* If they did, find the index based on it.*/
+  if (*arg)
+    pivot = find_index(arg, array, j);
+
+  /* Otherwise, they didn't.  If they are an immortal, this won't fly. */
+  else if (GET_LEVEL(ch) >= LVL_IMMORT) {
+    send_to_char(ch, "Immortals are not in the rank list, how fair would that be?\r\n");
+    return;
+  }
+
+  /* A slight hack -- we just make them target exactly who they would
+   * have needed to target in order to make the topten mortals show. */
+
+  if (!strcmp(arg, "topplayers")) {
+    topten = 1;
+    pivot = (RANK_TOSHOW / 2) - TOP_IS_EVEN;
+  }
+
+  if (pivot == -1) {
+    send_to_char(ch, "There is no such mortal.\r\n");
+    free(array);
+    free_char(tch);
+    return;
+  }
+
+  if(topten)
+    send_to_char(ch, "\r\nTop Mortals:\r\n----------------\r\n");
+  else
+    send_to_char(ch, "\r\n%s's Rank:\r\n----------------\r\n",
+                     array[pivot].name);
+
+  for (i = 0;i < j;i++) {
+
+    /* You can put whatever you want here.  Note that several
+     * factors played a role in the comparison, but we don't
+     * show them all here because I think it would look tacky.
+     * Go ahead and put them in if you like. */
+    if(( (i - pivot) < ((RANK_TOSHOW / 2) + 1)) && ((pivot - i) < (RANK_TOSHOW / 2) + !TOP_IS_EVEN) )
+      send_to_char(ch, "@g%2d@n) @y[%2d %s] %s@n\r\n", i+1,
+        array[i].level, class_abbrevs[(int)array[i].chclass], array[i].name);
+  }
+
+  free_char(tch);
+  free(array);
+}
diff -BbuprN -x '*.o' oldsrc/cedit.c src/cedit.c
--- oldsrc/cedit.c	2007-11-28 18:02:08.000000000 -0800
+++ src/cedit.c	2008-01-15 02:18:02.859375000 -0800
@@ -130,6 +130,7 @@ void cedit_setup(struct descriptor_data 
   OLC_CONFIG(d)->operation.use_new_socials    = CONFIG_NEW_SOCIALS;
   OLC_CONFIG(d)->operation.auto_save_olc      = CONFIG_OLC_SAVE;
   OLC_CONFIG(d)->operation.nameserver_is_slow = CONFIG_NS_IS_SLOW;
+  OLC_CONFIG(d)->operation.RANK_LENGTH        = CONFIG_RANK_LENGTH;
 
   /* Autowiz */
   OLC_CONFIG(d)->autowiz.use_autowiz          = CONFIG_USE_AUTOWIZ;
@@ -223,6 +224,7 @@ void cedit_save_internally(struct descri
   CONFIG_NEW_SOCIALS        = OLC_CONFIG(d)->operation.use_new_socials;
   CONFIG_NS_IS_SLOW = OLC_CONFIG(d)->operation.nameserver_is_slow;
   CONFIG_OLC_SAVE           = OLC_CONFIG(d)->operation.auto_save_olc;
+  CONFIG_RANK_LENGTH        = OLC_CONFIG(d)->operation.RANK_LENGTH;
 
   /* Autowiz */
   CONFIG_USE_AUTOWIZ          = OLC_CONFIG(d)->autowiz.use_autowiz;
@@ -354,6 +356,8 @@ int save_config( IDXTYPE nowhere )
               "no_mort_to_immort = %d\n\n", CONFIG_NO_MORT_TO_IMMORT);
   fprintf(fl, "* Should closed doors be shown on autoexit / exit?\n"
               "disp_closed_doors = %d\n\n", CONFIG_DISP_CLOSED_DOORS);
+  fprintf(fl, "* How long should the rank list be at any given invokation?\n"
+              "rank_length = %d\n\n", CONFIG_RANK_LENGTH);
 
   strcpy(buf, CONFIG_OK);
   strip_cr(buf);
@@ -675,13 +679,14 @@ void cedit_disp_operation_options(struct
   	"%sE%s) Max Players  : %s%d\r\n"
   	"%sF%s) Max Filesize : %s%d\r\n"
   	"%sG%s) Max Bad Pws  : %s%d\r\n"
-  	"%sH%s) Site Ok Everyone : %s%s\r\n"
-  	"%sI%s) Name Server Is Slow : %s%s\r\n"
-        "%sJ%s) Use new socials file: %s%s\r\n"
-        "%sK%s) OLC autosave to disk: %s%s\r\n"
-  	"%sL%s) Main Menu           : \r\n%s%s\r\n"
-  	"%sM%s) Welcome Message     : \r\n%s%s\r\n"
-  	"%sN%s) Start Message       : \r\n%s%s\r\n"
+      "%sH%s) Rank Length  : %s%d\r\n"
+  	"%sI%s) Site Ok Everyone : %s%s\r\n"
+  	"%sJ%s) Name Server Is Slow : %s%s\r\n"
+  	"%sK%s) Use new socials file: %s%s\r\n"
+  	"%sL%s) OLC autosave to disk: %s%s\r\n"
+  	"%sM%s) Main Menu           : \r\n%s%s\r\n"
+  	"%sN%s) Welcome Message     : \r\n%s%s\r\n"
+  	"%sO%s) Start Message       : \r\n%s%s\r\n"
     "%sQ%s) Exit To The Main Menu\r\n"
     "Enter your choice : ",
     grn, nrm, cyn, OLC_CONFIG(d)->operation.DFLT_PORT,
@@ -691,6 +696,7 @@ void cedit_disp_operation_options(struct
     grn, nrm, cyn, OLC_CONFIG(d)->operation.max_playing,
     grn, nrm, cyn, OLC_CONFIG(d)->operation.max_filesize,
     grn, nrm, cyn, OLC_CONFIG(d)->operation.max_bad_pws,
+    grn, nrm, cyn, OLC_CONFIG(d)->operation.RANK_LENGTH,
     grn, nrm, cyn, YESNO(OLC_CONFIG(d)->operation.siteok_everyone),
     grn, nrm, cyn, YESNO(OLC_CONFIG(d)->operation.nameserver_is_slow),
     grn, nrm, cyn, YESNO(OLC_CONFIG(d)->operation.use_new_socials),
@@ -1070,28 +1076,34 @@ void cedit_parse(struct descriptor_data 
 
          case 'h':
          case 'H':
-           TOGGLE_VAR(OLC_CONFIG(d)->operation.siteok_everyone);
-           break;
+           write_to_output(d, "Enter the length of the rank screen : ");
+           OLC_MODE(d) = CEDIT_RANK_LENGTH;
+           return;
 
          case 'i':
          case 'I':
-           TOGGLE_VAR(OLC_CONFIG(d)->operation.nameserver_is_slow);
+           TOGGLE_VAR(OLC_CONFIG(d)->operation.siteok_everyone);
            break;
 
          case 'j':
          case 'J':
-           TOGGLE_VAR(OLC_CONFIG(d)->operation.use_new_socials);
-           send_to_char(d->character,
-              "Please note that using the stock social file will disable AEDIT.\r\n");
+           TOGGLE_VAR(OLC_CONFIG(d)->operation.nameserver_is_slow);
            break;
 
          case 'k':
          case 'K':
-           TOGGLE_VAR(OLC_CONFIG(d)->operation.auto_save_olc);
+           TOGGLE_VAR(OLC_CONFIG(d)->operation.use_new_socials);
+           send_to_char(d->character,
+              "Please note that using the stock social file will disable AEDIT.\r\n");
            break;
 
          case 'l':
          case 'L':
+           TOGGLE_VAR(OLC_CONFIG(d)->operation.auto_save_olc);
+           break;
+
+         case 'm':
+         case 'M':
            OLC_MODE(d) = CEDIT_MENU;
            clear_screen(d);
            send_editor_help(d);
@@ -1105,8 +1117,8 @@ void cedit_parse(struct descriptor_data 
            string_write(d, &OLC_CONFIG(d)->operation.MENU, MAX_INPUT_LENGTH, 0, oldtext);
            return;
 
-         case 'm':
-         case 'M':
+         case 'n':
+         case 'N':
            OLC_MODE(d) = CEDIT_WELC_MESSG;
            clear_screen(d);
            send_editor_help(d);
@@ -1120,8 +1132,8 @@ void cedit_parse(struct descriptor_data 
            string_write(d, &OLC_CONFIG(d)->operation.WELC_MESSG, MAX_INPUT_LENGTH, 0, oldtext);
            return;
 
-         case 'n':
-         case 'N':
+         case 'o':
+         case 'O':
            OLC_MODE(d) = CEDIT_START_MESSG;
            clear_screen(d);
            send_editor_help(d);
@@ -1511,6 +1523,11 @@ void cedit_parse(struct descriptor_data 
       cedit_disp_operation_options(d);
       break;
 
+    case CEDIT_RANK_LENGTH:
+      OLC_CONFIG(d)->operation.RANK_LENGTH = atoi(arg);
+      cedit_disp_operation_options(d);
+      break;
+
     case CEDIT_MIN_WIZLIST_LEV:
       if (atoi(arg) > LVL_IMPL) {
         write_to_output(d,
diff -BbuprN -x '*.o' oldsrc/db.c src/db.c
--- oldsrc/db.c	2007-11-28 18:02:08.000000000 -0800
+++ src/db.c	2008-01-15 02:18:02.875000000 -0800
@@ -3598,6 +3598,8 @@ void load_config( void )
       case 'r':
         if (!str_cmp(tag, "rent_file_timeout"))
           CONFIG_RENT_TIMEOUT = num;
+        else if (!str_cmp(tag, "rank_length"))
+          CONFIG_RANK_LENGTH = num;
         break;
 
       case 's':
diff -BbuprN -x '*.o' oldsrc/interpreter.c src/interpreter.c
--- oldsrc/interpreter.c	2007-11-28 18:05:02.000000000 -0800
+++ src/interpreter.c	2008-01-15 02:18:02.921875000 -0800
@@ -165,6 +165,7 @@ ACMD(do_purge);
 ACMD(do_put);
 ACMD(do_qcomm);
 ACMD(do_quit);
+ACMD(do_rank);
 ACMD(do_reboot);
 ACMD(do_remove);
 ACMD(do_reply);
@@ -405,6 +406,7 @@ cpp_extern const struct command_info cmd
   { "quit"     , "quit"    , POS_DEAD    , do_quit     , 0, SCMD_QUIT },
   { "qsay"     , "qsay"    , POS_RESTING , do_qcomm    , 0, SCMD_QSAY },
 
+  { "rank"     , "rank"    , POS_SLEEPING, do_rank     , 0, 0 },
   { "reply"    , "r"       , POS_SLEEPING, do_reply    , 0, 0 },
   { "rest"     , "res"     , POS_RESTING , do_rest     , 0, 0 },
   { "read"     , "rea"     , POS_RESTING , do_look     , 0, SCMD_READ },
diff -BbuprN -x '*.o' oldsrc/oasis.h src/oasis.h
--- oldsrc/oasis.h	2007-11-28 18:02:08.000000000 -0800
+++ src/oasis.h	2008-01-15 02:18:02.937500000 -0800
@@ -355,6 +355,7 @@ extern const char *nrm, *grn, *cyn, *yel
 #define CEDIT_NAMESERVER_IS_SLOW	51
 #define CEDIT_USE_AUTOWIZ		52
 #define CEDIT_MIN_WIZLIST_LEV		53
+#define CEDIT_RANK_LENGTH		54
 
 /* Hedit Submodes of connectedness. */
 #define HEDIT_CONFIRM_SAVESTRING        0
diff -BbuprN -x '*.o' oldsrc/structs.h src/structs.h
--- oldsrc/structs.h	2007-11-28 18:02:08.000000000 -0800
+++ src/structs.h	2008-01-15 02:18:02.937500000 -0800
@@ -792,6 +792,19 @@ struct player_special_data {
    char *host;			/* player host				*/
 };
 
+/* Stuff stored in the rank_data array for the "rank" command, which is 
+ * defined in act.informative.c.  You can add whatever you want to this array,
+ * and add it into the ranking system quite easily.  Just make sure that you
+ * make the corresponding changes in ACMD(do_rank). */
+
+struct rank_data {
+    char name[MAX_STRING_LENGTH];;
+    int level;
+    byte chclass;
+    int exp;
+    int gold;
+};
+
 /* Specials used by NPCs, not PCs */
 struct mob_special_data {
    memory_rec *memory;	    /* List of attackers to remember	       */
@@ -1090,6 +1103,7 @@ struct game_operation {
   char *MENU;               /* The MAIN MENU.			  */
   char *WELC_MESSG;	    /* The welcome message.		  */
   char *START_MESSG;        /* The start msg for new characters.  */
+  int RANK_LENGTH;          /* How long should the rank output be?*/
 };
 
 /* The Autowizard options. */
diff -BbuprN -x '*.o' oldsrc/utils.h src/utils.h
--- oldsrc/utils.h	2007-11-28 18:02:08.000000000 -0800
+++ src/utils.h	2008-01-15 02:18:02.953125000 -0800
@@ -581,7 +581,7 @@ void char_from_furniture(struct char_dat
 #define CONFIG_MENU             config_info.operation.MENU
 #define CONFIG_WELC_MESSG       config_info.operation.WELC_MESSG
 #define CONFIG_START_MESSG      config_info.operation.START_MESSG
-
+#define CONFIG_RANK_LENGTH      config_info.operation.RANK_LENGTH
 /* Autowiz */
 #define CONFIG_USE_AUTOWIZ      config_info.autowiz.use_autowiz
 #define CONFIG_MIN_WIZLIST_LEV  config_info.autowiz.min_wizlist_lev
