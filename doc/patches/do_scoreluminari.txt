ACMD(do_score)
{
  char buf[MAX_INPUT_LENGTH];
  struct time_info_data playing_time;
  int calc_bab = MIN(MAX_BAB, BAB(ch)), w_type, i = 0, counter = 0;
  struct obj_data *wielded = GET_EQ(ch, WEAR_WIELD_1);
  float height = GET_HEIGHT(ch);

  // get some initial info before score display
  if (wielded && GET_OBJ_TYPE(wielded) == ITEM_WEAPON)
    w_type = GET_OBJ_VAL(wielded, 3) + TYPE_HIT;
  else {
    if (IS_NPC(ch) && ch->mob_specials.attack_type != 0)
      w_type = ch->mob_specials.attack_type + TYPE_HIT;
    else
      w_type = TYPE_HIT;
  }
  playing_time = *real_time_passed((time(0) - ch->player.time.logon) +
                ch->player.time.played, 0);
  height *= 0.393700787402;

  //score display
  send_to_char(ch, "                \t[f451]Score information for\tn %s\r\n", 
	GET_NAME(ch));
  send_to_char(ch,
"\tC=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\tn\r\n");

  send_to_char(ch, "\tCTitle:\tn %s\r\n", GET_TITLE(ch) ? GET_TITLE(ch) : "None.");

  send_to_char(ch, "\tCClass(es):\tn ");
  if (!IS_NPC(ch))
    for (i = 0; i < MAX_CLASSES; i++) {
      if (CLASS_LEVEL(ch, i)) {
        if (counter)
          send_to_char(ch, " / ");
        send_to_char(ch, "%d %s", CLASS_LEVEL(ch, i), class_abbrevs[i]);
        counter++;
      }  
    }
  else
    send_to_char(ch, " %s", CLASS_ABBR(ch));

  send_to_char(ch, "\r\n\tCLevel:\tn %d  \tCRace:\tn %s "
          "(\tDType 'innates'\tn)  \tCSex:\tn ",
                GET_LEVEL(ch), RACE_ABBR(ch));
  switch (GET_SEX(ch)) {
    case SEX_MALE: send_to_char(ch, "Male\r\n"); break;
    case SEX_FEMALE: send_to_char(ch, "Female\r\n"); break;
    default: strcat(buf, "Neutral\r\n"); break;
  }

  send_to_char(ch, "\tCPlaying time:\tn %d \tCdays /\tn %d \tChours\tn\r\n",
		playing_time.day, playing_time.hours);

  send_to_char(ch, "\tCHit points:\tn %d(%d)   \tCMoves:\tn %d(%d)   \tCMana:\tn %d(%d)\r\n",
                GET_HIT(ch), GET_MAX_HIT(ch), GET_MOVE(ch), GET_MAX_MOVE(ch),
                GET_MANA(ch), GET_MAX_MANA(ch));

  // with sizes, this seems unnecessary now
  /*
     \tCHeight:\tn %d'%d\"  \tCWeight:\tn %d \tClbs\tn\r\n",
                (int)(height / 12.0),
               ((int)(height) % 12), GET_WEIGHT(ch));
  */

  send_to_char(ch, "\tCAge:\tn %d \tCyrs\tn / %d \tCmths\tn",
          age(ch)->year, age(ch)->month);
  send_to_char(ch, "    \tCCharacter Size Category:\tn  %s\r\n",
        size_names[GET_SIZE(ch)]);

  send_to_char(ch,
"\tC---------------------------------------------------------\tn\r\n");

  send_to_char(ch, "\tCStr:\tn %2d[%2d]      \tCInt:\tn %2d[%2d]      \tCWis:\tn %2d[%2d]\r\n"
		"\tCDex:\tn %2d[%2d]      \tCCon:\tn %2d[%2d]      \tCCha:\tn %2d[%2d]\r\n",
	GET_STR(ch), GET_STR_BONUS(ch), GET_INT(ch), GET_INT_BONUS(ch), GET_WIS(ch), 
	GET_WIS_BONUS(ch), GET_DEX(ch), GET_DEX_BONUS(ch), GET_CON(ch), GET_CON_BONUS(ch),
	GET_CHA(ch), GET_CHA_BONUS(ch));

  send_to_char(ch, "\tCArmorClass:\tn %d   \tCBAB:\tn %d   \tCSpell Resist:\tn %d\r\n",
		compute_armor_class(NULL, ch), calc_bab,
		compute_spell_res(NULL, ch, 0)); 

  send_to_char(ch, "\tCHitroll:\tn %d      \tCDamroll:\tn %d      \tC# of Attacks:\tn %d\r\n", 
		compute_bab(ch, NULL, w_type) - calc_bab,
		compute_damage_bonus(ch, NULL, w_type, 0, 0),
		perform_attacks(ch, 1));

  send_to_char(ch, "\tCDamage Reduction:\tn %d      \tCConcealment:\tn %d\r\n",
		compute_damage_reduction(ch, -1),
		compute_concealment(ch));

  send_to_char(ch, "\tCAlignment:\tn %s", get_align_by_num(GET_ALIGNMENT(ch)));
  send_to_char(ch, "        \tCLoad carried:\tn %d \tClbs\tn\r\n", IS_CARRYING_W(ch));

  send_to_char(ch,
	"\tCSaving Throws:  Fortitude[\tn%d\tC] Reflex[\tn%d\tC] Will[\tn%d\tC]\tn\r\n",
	compute_mag_saves(ch, SAVING_FORT, 0),
	compute_mag_saves(ch, SAVING_REFL, 0),
	compute_mag_saves(ch, SAVING_WILL, 0));

  send_to_char(ch,
"\tC---------------------------------------------------------\tn\r\n");

  if (!IS_NPC(ch))
    send_to_char(ch, "\tCWimpy:\tn %d  ", GET_WIMP_LEV(ch));
  send_to_char(ch, "\tCDivLvl:\tn %d  \tCMgcLvl:\tn %d"
          "  \tCCstrLvl:\tn %d\r\n",
          DIVINE_LEVEL(ch), MAGIC_LEVEL(ch), CASTER_LEVEL(ch));

  send_to_char(ch, "\tCExp:\tn %d   \tCExpTNL:\tn: ", GET_EXP(ch));
  if (GET_LEVEL(ch) >= LVL_IMMORT)
    send_to_char(ch, "N/A   ");
  else
    send_to_char(ch, "%d   ", 
	level_exp(ch, GET_LEVEL(ch) + 1) - GET_EXP(ch));

  send_to_char(ch, "\tCStatus:\tn ");
  if (FIGHTING(ch))
    send_to_char(ch, "(Fighting) - ");
  switch (GET_POS(ch)) {
    case POS_DEAD: send_to_char(ch, "Dead\r\n"); break;
    case POS_MORTALLYW: send_to_char(ch, "Mortally wounded\r\n"); break;
    case POS_INCAP: send_to_char(ch, "Incapacitated\r\n"); break;
    case POS_STUNNED: send_to_char(ch, "Stunned\r\n"); break;
    case POS_SLEEPING: send_to_char(ch, "Sleeping\r\n"); break;
    case POS_RESTING: send_to_char(ch, "Resting\r\n"); break;
    case POS_SITTING:
      if (!SITTING(ch))
        send_to_char(ch, "Sitting\r\n");
      else {
        struct obj_data *furniture = SITTING(ch);
        send_to_char(ch, "Sitting upon %s.\r\n", furniture->short_description);
      }
      break;
    case POS_FIGHTING: send_to_char(ch, "Fighting\r\n"); break;
    case POS_STANDING: send_to_char(ch, "Standing\r\n"); break;
    default: send_to_char(ch, "Floating\r\n"); break;
  }

  if (!IS_NPC(ch)) {
    send_to_char(ch, "\tCQuests completed:\tn %d   \tCQuestPoints:\tn %d   \tCOn Quest:\tn",
         GET_NUM_QUESTS(ch), GET_QUESTPOINTS(ch));
    if (GET_QUEST(ch) == NOTHING)
      send_to_char(ch, " None\r\n");
    else
      send_to_char(ch, " %d\r\n",
                     GET_QUEST(ch) == NOTHING ? -1 : GET_QUEST(ch));

    if (GET_AUTOCQUEST_VNUM(ch))
      send_to_char(ch, "\tCOn Crafting Job: (%d) %s, using: %s.\r\n", 
              GET_AUTOCQUEST_MAKENUM(ch), GET_AUTOCQUEST_DESC(ch),
              material_name[GET_AUTOCQUEST_MATERIAL(ch)]);  
  }
  
  send_to_char(ch, "\tYGold:\tn %d            \tYGold in Bank:\tn %d\r\n",    
		GET_GOLD(ch), GET_BANK_GOLD(ch));

  if (GET_LEVEL(ch) >= LVL_IMMORT) {
    if (POOFIN(ch))
      send_to_char(ch, "%sPOOFIN:  %s%s %s%s\r\n", QYEL, QCYN, GET_NAME(ch), POOFIN(ch), QNRM);
    else
      send_to_char(ch, "%sPOOFIN:  %s%s appears with an ear-splitting bang.%s\r\n", QYEL, QCYN, GET_NAME(ch), QNRM);
    if (POOFOUT(ch))
      send_to_char(ch, "%sPOOFOUT: %s%s %s%s\r\n", QYEL, QCYN, GET_NAME(ch), POOFOUT(ch), QNRM);
    else
      send_to_char(ch, "%sPOOFOUT: %s%s disappears in a puff of smoke.%s\r\n", QYEL, QCYN, GET_NAME(ch), QNRM);
    send_to_char(ch, "\tyYour current zone:\tn %s%d%s\r\n", CCCYN(ch, C_NRM), GET_OLC_ZONE(ch), CCNRM(ch, C_NRM));
  }

  if (!IS_NPC(ch)) {
    if (GET_COND(ch, DRUNK) > 10)
      send_to_char(ch, "You are intoxicated.\r\n");
    if (GET_COND(ch, HUNGER) == 0)
      send_to_char(ch, "You are hungry.\r\n");
    if (GET_COND(ch, THIRST) == 0)
      send_to_char(ch, "You are thirsty.\r\n");
    if (PRF_FLAGGED(ch, PRF_SUMMONABLE))
      send_to_char(ch, "\r\nYou are summonable by other players.\r\n");
  }
  send_to_char(ch,
"\tC=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\tn\r\n");
  send_to_char(ch, "\tDType 'attacks' to see your attack rotation\tn\r\n");
  send_to_char(ch, "\tDType 'affects' to see what you are affected by\tn\r\n");
  if (CLASS_LEVEL(ch, CLASS_WIZARD))
    send_to_char(ch, "\tDType 'memorize' to see your spell interface\tn\r\n");
  if (CLASS_LEVEL(ch, CLASS_SORCERER))
    send_to_char(ch, "\tDType 'meditate' to see your spell interface\tn\r\n");
  if (CLASS_LEVEL(ch, CLASS_CLERIC))
    send_to_char(ch, "\tDType 'prayer' to see your spell interface\tn\r\n");
  if (CLASS_LEVEL(ch, CLASS_RANGER))
    send_to_char(ch, "\tDType 'adjure' to see your spell interface\tn\r\n");
//  if (CLASS_LEVEL(ch, CLASS_BARD))
//    send_to_char(ch, "\tDType 'compose' to see your spell interface\tn\r\n");
  if (CLASS_LEVEL(ch, CLASS_DRUID))
    send_to_char(ch, "\tDType 'commune' to see your spell interface\tn\r\n");
  if (CLASS_LEVEL(ch, CLASS_PALADIN))
    send_to_char(ch, "\tDType 'petition' to see your spell interface\tn\r\n");
}
