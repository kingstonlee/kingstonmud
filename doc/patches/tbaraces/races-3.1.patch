# This patch file made by Xiuhtecuhtli. Patch file adds PC based races.
# Following Index: paths are relative to: top level root of tbamud directory.
# This patch can be applied using context Tools: Patch action on respective folder.
# It uses platform neutral UTF-8 encoding and \n newlines.
# Above lines and this line are ignored by the patching process.
Index: src/players.c
===================================================================
--- src/players.c	(revision 18)
+++ src/players.c	(working copy)
@@ -262,6 +262,7 @@ int load_char(const char *name, struct char_data *
       GET_SKILL(ch, i) = 0;
     GET_SEX(ch) = PFDEF_SEX;
     GET_CLASS(ch) = PFDEF_CLASS;
+    GET_RACE(ch) = PFDEF_RACE;
     GET_LEVEL(ch) = PFDEF_LEVEL;
     GET_HEIGHT(ch) = PFDEF_HEIGHT;
     GET_WEIGHT(ch) = PFDEF_WEIGHT;
@@ -440,7 +441,8 @@ int load_char(const char *name, struct char_data *
         break;
 
       case 'R':
-	     if (!strcmp(tag, "Room"))	GET_LOADROOM(ch)	= atoi(line);
+             if(!strcmp(tag, "Race"))   GET_RACE(ch)     = atoi(line);
+	else if(!strcmp(tag, "Room"))   GET_LOADROOM(ch) = atoi(line);
 	break;
 
       case 'S':
@@ -588,6 +590,7 @@ void save_char(struct char_data * ch)
   if (POOFOUT(ch))				fprintf(fl, "PfOt: %s\n", POOFOUT(ch));
   if (GET_SEX(ch)	     != PFDEF_SEX)	fprintf(fl, "Sex : %d\n", GET_SEX(ch));
   if (GET_CLASS(ch)	   != PFDEF_CLASS)	fprintf(fl, "Clas: %d\n", GET_CLASS(ch));
+  if (GET_RACE(ch)         != PFDEF_RACE)       fprintf(fl, "Race: %d\n", GET_RACE(ch));
   if (GET_LEVEL(ch)	   != PFDEF_LEVEL)	fprintf(fl, "Levl: %d\n", GET_LEVEL(ch));
 
   fprintf(fl, "Id  : %ld\n", GET_IDNUM(ch));
Index: src/act.wizard.c
===================================================================
--- src/act.wizard.c	(revision 18)
+++ src/act.wizard.c	(working copy)
@@ -26,6 +26,7 @@
 #include "act.h"
 #include "genzon.h" /* for real_zone_by_thing */
 #include "class.h"
+#include "races.h"
 #include "genolc.h"
 #include "fight.h"
 #include "house.h"
@@ -729,6 +730,7 @@ static void do_stat_object(struct char_data *ch, s
 static void do_stat_character(struct char_data *ch, struct char_data *k)
 {
   char buf[MAX_STRING_LENGTH];
+  char buf2[MAX_STRING_LENGTH];
   int i, i2, column, found = FALSE;
   struct obj_data *j;
   struct follow_type *fol;
@@ -747,9 +749,11 @@ static void do_stat_character(struct char_data *ch
   send_to_char(ch, "L-Des: %s", k->player.long_descr ? k->player.long_descr : "<None>\r\n");
   send_to_char(ch, "D-Des: %s", k->player.description ? k->player.description : "<None>\r\n");
 
-  sprinttype(k->player.chclass, pc_class_types, buf, sizeof(buf));
-  send_to_char(ch, "%s%s, Lev: [%s%2d%s], XP: [%s%7d%s], Align: [%4d]\r\n",
-	IS_NPC(k) ? "Mobile" : "Class: ", IS_NPC(k) ? "" : buf, CCYEL(ch, C_NRM), GET_LEVEL(k), CCNRM(ch, C_NRM),
+  sprinttype(k->player.chrace, pc_race_types, buf, sizeof(buf));
+  sprinttype(k->player.chclass, pc_class_types, buf2, sizeof(buf2));
+  send_to_char(ch, "%s%s %s, Lev: [%s%2d%s], XP: [%s%7d%s], Align: [%4d]\r\n",
+	IS_NPC(k) ? "Mobile" : "Class: ", IS_NPC(k) ? "" : buf,
+        IS_NPC(k) ? "" : buf2, CCYEL(ch, C_NRM), GET_LEVEL(k), CCNRM(ch, C_NRM),
 	CCYEL(ch, C_NRM), GET_EXP(k), CCNRM(ch, C_NRM), GET_ALIGNMENT(k));
 
   if (!IS_NPC(k)) {
@@ -2009,8 +2013,9 @@ ACMD(do_last)
       return;
     }
 
-    send_to_char(ch, "[%5ld] [%2d %s] %-12s : %-18s : %-20s\r\n",
+    send_to_char(ch, "[%5ld] [%2d %s %s] %-12s : %-18s : %-20s\r\n",
     GET_IDNUM(vict), (int) GET_LEVEL(vict),
+    race_abbrevs[(int) GET_RACE(vict)],
     class_abbrevs[(int) GET_CLASS(vict)], GET_NAME(vict),
     GET_HOST(vict) && *GET_HOST(vict) ? GET_HOST(vict) : "(NOHOST)",
     ctime(&vict->player.time.logon));
@@ -2502,9 +2507,9 @@ ACMD(do_show)
       free_char(vict);
       return;
     }
-    send_to_char(ch, "Player: %-12s (%s) [%2d %s]\r\n", GET_NAME(vict),
-      genders[(int) GET_SEX(vict)], GET_LEVEL(vict), class_abbrevs[(int)
-      GET_CLASS(vict)]);
+    send_to_char(ch, "Player: %-12s (%s) [%2d %s %s]\r\n", GET_NAME(vict),
+      genders[(int) GET_SEX(vict)], GET_LEVEL(vict), race_abbrevs[(int) GET_RACE(vict)],
+      class_abbrevs[(int) GET_CLASS(vict)]);
     send_to_char(ch, "Au: %-8d  Bal: %-8d  Exp: %-8d  Align: %-5d  Lessons: %-3d\r\n",
     GET_GOLD(vict), GET_BANK_GOLD(vict), GET_EXP(vict),
     GET_ALIGNMENT(vict), GET_PRACTICES(vict));
@@ -2730,6 +2735,7 @@ ACMD(do_show)
    { "wis", 		LVL_BUILDER, 	BOTH, 	NUMBER }, /* 55 */
    { "questpoints",     LVL_GOD,        PC,     NUMBER },
    { "questhistory",    LVL_GOD,        PC,   NUMBER },
+   { "race",		LVL_GRGOD,	BOTH,	MISC },
    { "\n", 0, BOTH, MISC }
   };
 
@@ -3142,6 +3148,13 @@ static int perform_set(struct char_data *ch, struc
         }
         break;
       }
+    case 58: /*Race */
+      if ((i = parse_race(*val_arg)) == RACE_UNDEFINED) {
+      send_to_char(ch, "That is not a valid race.\r\n");
+      return (0);
+    }
+    GET_RACE(vict) = i;
+    break;
     default:
       send_to_char(ch, "Can't set that!\r\n");
       return (0);
Index: src/constants.c
===================================================================
--- src/constants.c	(revision 18)
+++ src/constants.c	(working copy)
@@ -295,6 +295,7 @@ const char *connected_types[] = {
   "Trigger edit",
   "Help edit",
   "Quest edit",
+  "Select race",
   "\n"
 };
 
@@ -422,6 +423,11 @@ const char *extra_bits[] = {
   "ANTI_WARRIOR",
   "NO_SELL",
   "QUEST_ITEM",
+  "ANTI_HUMANOID",
+  "ANTI_ELF",
+  "ANTI_GNOME",
+  "ANTI_DWARF",
+  "ANTI_HALFLING",
   "\n"
 };
 
Index: src/structs.h
===================================================================
--- src/structs.h	(revision 18)
+++ src/structs.h	(working copy)
@@ -147,13 +147,15 @@
 /** Total number of available PC Classes */
 #define NUM_CLASSES	  4
 
-/* NPC classes (currently unused - feel free to implement!) */
-#define CLASS_OTHER       0    /**< NPC Class Other (or undefined) */
-#define CLASS_UNDEAD      1    /**< NPC Class Undead */
-#define CLASS_HUMANOID    2    /**< NPC Class Humanoid */
-#define CLASS_ANIMAL      3    /**< NPC Class Animal */
-#define CLASS_DRAGON      4    /**< NPC Class Dragon */
-#define CLASS_GIANT       5    /**< NPC Class Giant */
+/* PC Races */
+#define RACE_UNDEFINED	  (-1) /**< PC race undefined */
+#define RACE_HUMANOID	  0    /**< PC race 'H' */
+#define RACE_ELF	  1    /**< PC race 'E' */
+#define RACE_GNOME	  2    /**< PC race 'G' */
+#define RACE_DWARF	  3    /**< PC race 'W' */
+#define RACE_HALFLING	  4    /**< PC race 'L' */
+/** Total number of available PC Races */
+#define NUM_RACES	  5
 
 /* Sex */
 #define SEX_NEUTRAL   0   /**< Neutral Sex (Hermaphrodite) */
@@ -313,7 +315,8 @@
 #define CON_TRIGEDIT     26 /**< OLC mode - trigger edit              */
 #define CON_HEDIT        27 /**< OLC mode - help edit */
 #define CON_QEDIT        28 /**< OLC mode - quest edit */
-#define CON_PREFEDIT     29 /**< OLC mode - preference edit */
+#define CON_QRACE	 29 /**< Choose character race */
+#define CON_PREFEDIT     30 /**< OLC mode - preference edit */
 
 /* OLC States range - used by IS_IN_OLC and IS_PLAYING */
 #define FIRST_OLC_STATE CON_OEDIT     /**< The first CON_ state that is an OLC */
@@ -412,8 +415,13 @@
 #define ITEM_ANTI_WARRIOR     15   /**< Not usable by warriors */
 #define ITEM_NOSELL           16   /**< Shopkeepers won't touch it */
 #define ITEM_QUEST            17   /**< Item is a quest item         */
+#define ITEM_ANTI_HUMANOID    18   /**< Item can't be worn by humanoids */
+#define ITEM_ANTI_ELF         19   /**< Item can't be worn by elfs */
+#define ITEM_ANTI_GNOME       20   /**< Item can't be worn by gnomes */
+#define ITEM_ANTI_DWARF       21   /**< Item can't be worn by dwarfs */
+#define ITEM_ANTI_HALFLING    22   /**< Item can't be worn by halflings */
 /** Total number of item flags */
-#define NUM_ITEM_FLAGS    18
+#define NUM_ITEM_FLAGS    23
 
 /* Modifier constants used with obj affects ('A' fields) */
 #define APPLY_NONE              0	/**< No effect			*/
@@ -837,6 +845,7 @@ struct char_player_data
   char *title;                   /**< PC / NPC title */
   byte sex;                      /**< PC / NPC sex */
   byte chclass;                  /**< PC / NPC class */
+  byte chrace;                   /**< PC / NPC's race */
   byte level;                    /**< PC / NPC level */
   struct time_data time;         /**< PC AGE in days */
   ubyte weight;                  /**< PC / NPC weight */
Index: src/interpreter.c
===================================================================
--- src/interpreter.c	(revision 18)
+++ src/interpreter.c	(working copy)
@@ -29,6 +29,7 @@
 #include "act.h" /* ACMDs located within the act*.c files */
 #include "ban.h"
 #include "class.h"
+#include "races.h"
 #include "graph.h"
 #include "hedit.h"
 #include "house.h"
@@ -72,7 +73,7 @@ cpp_extern const struct command_info cmd_info[] =
 
   /* now, the main list */
   { "at"       , "at"      , POS_DEAD    , do_at       , LVL_IMMORT, 0 },
-  { "advance"  , "adv"     , POS_DEAD    , do_advance  , LVL_GRGOD, 0 },
+  { "advance"  , "adv"     , POS_DEAD    , do_advance  , LVL_GOD, 0 },
   { "aedit"    , "aed"     , POS_DEAD    , do_oasis_aedit, LVL_GOD, 0 },
   { "alias"    , "ali"     , POS_DEAD    , do_alias    , 0, 0 },
   { "afk"      , "afk"     , POS_DEAD    , do_gen_tog  , 0, SCMD_AFK },
@@ -1472,16 +1473,37 @@ void nanny(struct descriptor_data *d, char *arg)
       return;
     }
 
-    write_to_output(d, "%s\r\nClass: ", class_menu);
+    write_to_output(d, "%s\r\nRace: ", race_menu);
+    STATE(d) = CON_QRACE;
+    break;
+
+  case CON_QRACE:
+    load_result = parse_race(*arg);
+    if (load_result == RACE_UNDEFINED) {
+      write_to_output(d, "\r\nThat's not a race.\r\nRace: ");
+      return;
+    } else
+      GET_RACE(d->character) = load_result;
+
+    write_to_output(d, "\r\nSelect a class:\r\n");
+
+    int i;
+    for (i = 0; i < NUM_CLASSES; i++) {
+        if (classRaceAllowed[(int) GET_RACE(d->character)][i])
+            write_to_output(d, "%s", class_menu[i]);
+    }
+        write_to_output(d, "\r\nClass: ");
+        
     STATE(d) = CON_QCLASS;
     break;
 
   case CON_QCLASS:
     load_result = parse_class(*arg);
-    if (load_result == CLASS_UNDEFINED) {
+    if (load_result == CLASS_UNDEFINED || !classRaceAllowed[GET_RACE(d->character)][load_result]) {
       write_to_output(d, "\r\nThat's not a class.\r\nClass: ");
       return;
-    } else
+    }
+    
       GET_CLASS(d->character) = load_result;
 
       if (d->olc) {
Index: src/handler.c
===================================================================
--- src/handler.c	(revision 18)
+++ src/handler.c	(working copy)
@@ -20,6 +20,7 @@
 #include "dg_scripts.h"
 #include "act.h"
 #include "class.h"
+#include "races.h"
 #include "fight.h"
 #include "quest.h"
 
@@ -532,7 +533,7 @@ void equip_char(struct char_data *ch, struct obj_d
     log("SYSERR: EQUIP: Obj is in_room when equip.");
     return;
   }
-  if (invalid_align(ch, obj) || invalid_class(ch, obj)) {
+  if (invalid_align(ch, obj) || invalid_class(ch, obj) || invalid_race(ch, obj)) {
     act("You are zapped by $p and instantly let go of it.", FALSE, ch, obj, 0, TO_CHAR);
     act("$n is zapped by $p and instantly lets go of it.", FALSE, ch, obj, 0, TO_ROOM);
     /* Changed to drop in inventory instead of the ground. */
Index: src/act.informative.c
===================================================================
--- src/act.informative.c	(revision 18)
+++ src/act.informative.c	(working copy)
@@ -23,6 +23,7 @@
 #include "mail.h"         /**< For the has_mail function */
 #include "act.h"
 #include "class.h"
+#include "races.h"
 #include "fight.h"
 #include "modify.h"
 #include "asciimap.h"
@@ -1090,7 +1091,7 @@ ACMD(do_help)
 }
 
 #define WHO_FORMAT \
-"Usage: who [minlev[-maxlev]] [-n name] [-c classlist] [-k] [-l] [-n] [-q] [-r] [-s] [-z]\r\n"
+"Usage: who [minlev[-maxlev]] [-n name] [-d racelist] [-c classlist] [-k] [-l] [-n] [-q] [-r] [-s] [-z]\r\n"
 
 /* Written by Rhade */
 ACMD(do_who)
@@ -1101,7 +1102,7 @@ ACMD(do_who)
   char name_search[MAX_INPUT_LENGTH], buf[MAX_INPUT_LENGTH];
   char mode;
   int low = 0, high = LVL_IMPL, localwho = 0, questwho = 0;
-  int showclass = 0, short_list = 0, outlaws = 0;
+  int showclass = 0, showrace = 0, short_list = 0, outlaws = 0;
   int who_room = 0, showgroup = 0, showleader = 0;
 
   struct {
@@ -1156,6 +1157,10 @@ ACMD(do_who)
         half_chop(buf1, arg, buf);
         showclass = find_class_bitvector(arg);
         break;
+      case 'd':
+	half_chop(buf1, arg, buf);
+	showrace = find_race_bitvector(arg);
+	break;
       case 'l':
         showleader = 1;
         strcpy(buf, buf1);   /* strcpy: OK (sizeof: buf1 == buf) */
@@ -1196,6 +1201,8 @@ ACMD(do_who)
         continue;
       if (showclass && !(showclass & (1 << GET_CLASS(tch))))
         continue;
+      if (showrace && !(showrace & (1 << GET_RACE(tch))))
+        continue;
       if (showgroup && (!tch->master || !AFF_FLAGGED(tch, AFF_GROUP)))
         continue;
       if (showleader && (!tch->followers || !AFF_FLAGGED(tch, AFF_GROUP)))
@@ -1240,21 +1247,23 @@ ACMD(do_who)
         continue;
       if (showclass && !(showclass & (1 << GET_CLASS(tch))))
         continue;
+      if (showrace && !(showrace & (1 << GET_RACE(tch))))
+        continue;
       if (showgroup && (!tch->master || !AFF_FLAGGED(tch, AFF_GROUP)))
         continue;
       if (showleader && (!tch->followers || !AFF_FLAGGED(tch, AFF_GROUP)))
         continue;
 
       if (short_list) {
-        send_to_char(ch, "%s[%2d %s] %-12.12s%s%s",
+        send_to_char(ch, "%s[%2d %s %s] %-12.12s%s%s",
           (GET_LEVEL(tch) >= LVL_IMMORT ? CCYEL(ch, C_SPR) : ""),
-          GET_LEVEL(tch), CLASS_ABBR(tch), GET_NAME(tch),
+          GET_LEVEL(tch), RACE_ABBR(tch), CLASS_ABBR(tch), GET_NAME(tch),
           CCNRM(ch, C_SPR), ((!(++num_can_see % 4)) ? "\r\n" : ""));
       } else {
         num_can_see++;
-        send_to_char(ch, "%s[%2d %s] %s%s%s%s",
+        send_to_char(ch, "%s[%2d %s %s] %s%s%s%s",
             (GET_LEVEL(tch) >= LVL_IMMORT ? CCYEL(ch, C_SPR) : ""),
-            GET_LEVEL(tch), CLASS_ABBR(tch),
+            GET_LEVEL(tch), RACE_ABBR(tch), CLASS_ABBR(tch),
             GET_NAME(tch), (*GET_TITLE(tch) ? " " : ""), GET_TITLE(tch),
             CCNRM(ch, C_SPR));
 
@@ -1331,7 +1340,7 @@ ACMD(do_who)
 }
 
 #define USERS_FORMAT \
-"format: users [-l minlevel[-maxlevel]] [-n name] [-h host] [-c classlist] [-o] [-p]\r\n"
+"format: users [-l minlevel[-maxlevel]] [-n name] [-h host] [-r racelist] [-c classlist] [-o] [-p]\r\n"
 
 ACMD(do_users)
 {
@@ -1341,7 +1350,7 @@ ACMD(do_users)
   struct char_data *tch;
   struct descriptor_data *d;
   int low = 0, high = LVL_IMPL, num_can_see = 0;
-  int showclass = 0, outlaws = 0, playing = 0, deadweight = 0;
+  int showclass = 0, showrace = 0, outlaws = 0, playing = 0, deadweight = 0;
   char buf[MAX_INPUT_LENGTH], arg[MAX_INPUT_LENGTH];
 
   host_search[0] = name_search[0] = '\0';
@@ -1386,6 +1395,11 @@ ACMD(do_users)
 	half_chop(buf1, arg, buf);
 	showclass = find_class_bitvector(arg);
 	break;
+      case 'r':
+	playing = 1;
+	half_chop(buf1, arg, buf);
+	showrace = find_race_bitvector(arg);
+	break;
       default:
 	send_to_char(ch, "%s", USERS_FORMAT);
 	return;
@@ -1397,8 +1411,8 @@ ACMD(do_users)
     }
   }				/* end while (parser) */
   send_to_char(ch,
-	 "Num Class   Name         State          Idl   Login@@   Site\r\n"
-	 "--- ------- ------------ -------------- ----- -------- ------------------------\r\n");
+	 "Num Class|Race  Name         State          Idl   Login@@   Site\r\n"
+	 "--- ----------- ------------ -------------- ----- -------- ------------------------\r\n");
 
   one_argument(argument, arg);
 
@@ -1424,15 +1438,17 @@ ACMD(do_users)
 	continue;
       if (showclass && !(showclass & (1 << GET_CLASS(tch))))
 	continue;
+      if (showrace && !(showrace & (1 << GET_RACE(tch))))
+	continue;
       if (GET_INVIS_LEV(tch) > GET_LEVEL(ch))
 	continue;
 
       if (d->original)
-	sprintf(classname, "[%2d %s]", GET_LEVEL(d->original),
-		CLASS_ABBR(d->original));
+      	sprintf(classname, "[%2d %s %s]", GET_LEVEL(d->original),
+                RACE_ABBR(d->original), CLASS_ABBR(d->original));
       else
-	sprintf(classname, "[%2d %s]", GET_LEVEL(d->character),
-		CLASS_ABBR(d->character));
+      	sprintf(classname, "[%2d %s %s]", GET_LEVEL(d->character),
+		RACE_ABBR(d->character), CLASS_ABBR(d->character));
     } else
       strcpy(classname, "   -   ");
 
@@ -1451,7 +1467,7 @@ ACMD(do_users)
     else
       strcpy(idletime, "     ");
 
-    sprintf(line, "%3d %-7s %-12s %-14s %-3s %-8s ", d->desc_num, classname,
+    sprintf(line, "%3d %-11s %-12s %-14s %-3s %-8s ", d->desc_num, classname,
 	d->original && d->original->player.name ? d->original->player.name :
 	d->character && d->character->player.name ? d->character->player.name :
 	"UNDEFINED",
@@ -2363,6 +2379,9 @@ ACMD(do_whois)
   send_to_char(ch, "Name: %s %s\r\nSex: %s\r\n", GET_NAME(victim),
                    (victim->player.title ? victim->player.title : ""), buf);
 
+  sprinttype (victim->player.chrace, pc_race_types, buf, sizeof(buf));
+  send_to_char(ch, "Race: %s\r\n", buf);
+
   sprinttype (victim->player.chclass, pc_class_types, buf, sizeof(buf));
   send_to_char(ch, "Class: %s\r\n", buf);
 
Index: src/utils.h
===================================================================
--- src/utils.h	(revision 18)
+++ src/utils.h	(working copy)
@@ -408,6 +408,8 @@ void char_from_furniture(struct char_data *ch);
 
 /** Class of ch. */
 #define GET_CLASS(ch)   ((ch)->player.chclass)
+/** Race of ch. */
+#define GET_RACE(ch)	((ch)->player.chrace)
 /** Height of ch. */
 #define GET_HEIGHT(ch)	((ch)->player.height)
 /** Weight of ch. */
@@ -772,6 +774,24 @@ void char_from_furniture(struct char_data *ch);
 #define IS_WARRIOR(ch)		(!IS_NPC(ch) && \
         (GET_CLASS(ch) == CLASS_WARRIOR))
 
+/** Return the race abbreviation for ch. */
+#define RACE_ABBR(ch) (IS_NPC(ch) ? "---" : race_abbrevs[(int)GET_RACE(ch)])
+/** 1 if ch is humanoid class, 0 if not. */
+#define IS_HUMANOID(ch)		(!IS_NPC(ch) && \
+	(GET_RACE(ch) == RACE_HUMANOID))
+/** 1 if ch is elf race, 0 if not. */
+#define IS_ELF(ch)		(!IS_NPC(ch) && \
+	(GET_RACE(ch) == RACE_ELF))
+/** 1 if ch is gnome race, 0 if not. */
+#define IS_GNOME(ch)		(!IS_NPC(ch) && \
+	(GET_RACE(ch) == RACE_GNOME))
+/** 1 if ch is dwarf race, 0 if not. */
+#define IS_DWARF(ch)		(!IS_NPC(ch) && \
+	(GET_RACE(ch) == RACE_DWARF))
+/** 1 if ch is warrior race, 0 if not. */
+#define IS_HALFLING(ch)	(!IS_NPC(ch) && \
+	(GET_RACE(ch) == RACE_HALFLING))
+
 /** Defines if ch is outdoors or not. */
 #define OUTSIDE(ch) (!ROOM_FLAGGED(IN_ROOM(ch), ROOM_INDOORS))
 
Index: src/class.c
===================================================================
--- src/class.c	(revision 18)
+++ src/class.c	(working copy)
@@ -45,13 +45,12 @@ const char *pc_class_types[] = {
 };
 
 /* The menu for choosing a class in interpreter.c: */
-const char *class_menu =
-"\r\n"
-"Select a class:\r\n"
-"  [C]leric\r\n"
-"  [T]hief\r\n"
+const char *class_menu [] = {
+"  [M]agic-user\r\n",
+"  [C]leric\r\n",
+"  [T]hief\r\n",
 "  [W]arrior\r\n"
-"  [M]agic-user\r\n";
+};
 
 /* The code to interpret a class letter -- used in interpreter.c when a new 
  * character is selecting a class and by 'set class' in act.wizard.c. */
@@ -62,8 +61,8 @@ int parse_class(char arg)
   switch (arg) {
   case 'm': return CLASS_MAGIC_USER;
   case 'c': return CLASS_CLERIC;
+  case 't': return CLASS_THIEF;
   case 'w': return CLASS_WARRIOR;
-  case 't': return CLASS_THIEF;
   default:  return CLASS_UNDEFINED;
   }
 }
@@ -1408,6 +1407,28 @@ void roll_real_abils(struct char_data *ch)
       ch->real_abils.str_add = rand_number(0, 100);
     break;
   }
+
+  switch (GET_RACE(ch)) {
+  case RACE_HUMANOID:
+    break;
+  case RACE_ELF:
+    ch->real_abils.dex += 1;
+    ch->real_abils.con -= 1;
+    break;
+  case RACE_GNOME:
+    ch->real_abils.intel += 1;
+    ch->real_abils.wis -= 1;
+    break;
+  case RACE_DWARF:
+    ch->real_abils.con += 1;
+    ch->real_abils.cha -= 1;
+    break;
+  case RACE_HALFLING:
+    ch->real_abils.dex += 1;
+    ch->real_abils.str -= 1;
+    break;
+  }
+
   ch->aff_abils = ch->real_abils;
 }
 
Index: src/shop.c
===================================================================
--- src/shop.c	(revision 18)
+++ src/shop.c	(working copy)
@@ -36,6 +36,11 @@ const char *trade_letters[] = {
         "Cleric",
         "Thief",
         "Warrior",
+        "Humanoid",		/* And finally the race based ones */
+        "Elf",
+        "Gnome",
+        "Dwarf",
+        "Halfling",
         "\n"
 };
 
@@ -133,6 +138,16 @@ static int is_ok_char(struct char_data *keeper, st
     do_tell(keeper, buf, cmd_tell, 0);
     return (FALSE);
   }
+
+  if ((IS_HUMANOID(ch) && NOTRADE_HUMANOID(shop_nr)) ||
+      (IS_ELF(ch) && NOTRADE_ELF(shop_nr)) ||
+      (IS_GNOME(ch) && NOTRADE_GNOME(shop_nr)) ||
+      (IS_DWARF(ch) && NOTRADE_DWARF(shop_nr)) ||
+      (IS_HALFLING(ch) && NOTRADE_HALFLING(shop_nr))) {
+    snprintf(buf, sizeof(buf), "%s %s", GET_NAME(ch), MSG_NO_SELL_RACE);
+    do_tell(keeper, buf, cmd_tell, 0);
+    return (FALSE);
+    }
   return (TRUE);
 }
 
Index: src/class.h
===================================================================
--- src/class.h	(revision 18)
+++ src/class.h	(working copy)
@@ -32,7 +32,7 @@ const char *title_male(int chclass, int level);
 
 extern const char *class_abbrevs[];
 extern const char *pc_class_types[];
-extern const char *class_menu;
+extern const char *class_menu[];
 extern int prac_params[][NUM_CLASSES];
 extern struct guild_info_type guild_info[];
 
Index: src/shop.h
===================================================================
--- src/shop.h	(revision 18)
+++ src/shop.h	(working copy)
@@ -81,8 +81,13 @@ struct shop_data {
 #define TRADE_NOCLERIC     (1 << 4)
 #define TRADE_NOTHIEF      (1 << 5)
 #define TRADE_NOWARRIOR    (1 << 6)
+#define TRADE_NOHUMANOID   (1 << 7)
+#define TRADE_NOELF        (1 << 8)
+#define TRADE_NOGNOME	   (1 << 9)
+#define TRADE_NODWARF	   (1 << 10)
+#define TRADE_NOHALFLING   (1 << 11)
 /** Total number of trade types */
-#define NUM_TRADERS     7
+#define NUM_TRADERS     12
 
 struct stack_data {
    int data[100];
@@ -127,6 +132,12 @@ struct stack_data {
 #define NOTRADE_THIEF(i)	(IS_SET(SHOP_TRADE_WITH((i)), TRADE_NOTHIEF))
 #define NOTRADE_WARRIOR(i)	(IS_SET(SHOP_TRADE_WITH((i)), TRADE_NOWARRIOR))
 
+#define NOTRADE_HUMANOID(i)	(IS_SET(SHOP_TRADE_WITH((i)), TRADE_NOHUMANOID))
+#define NOTRADE_ELF(i)		(IS_SET(SHOP_TRADE_WITH((i)), TRADE_NOELF))
+#define NOTRADE_GNOME(i)	(IS_SET(SHOP_TRADE_WITH((i)), TRADE_NOGNOME))
+#define NOTRADE_DWARF(i)	(IS_SET(SHOP_TRADE_WITH((i)), TRADE_NODWARF))
+#define NOTRADE_HALFLING(i)	(IS_SET(SHOP_TRADE_WITH((i)), TRADE_NOHALFLING))
+
 /* Shop flags */
 #define WILL_START_FIGHT    (1 << 0)
 #define WILL_BANK_MONEY     (1 << 1)
@@ -147,6 +158,7 @@ struct stack_data {
 #define MSG_NO_SEE_CHAR		"I don't trade with someone I can't see!"
 #define MSG_NO_SELL_ALIGN	"Get out of here before I call the guards!"
 #define MSG_NO_SELL_CLASS	"We don't serve your kind here!"
+#define MSG_NO_SELL_RACE	"Get out, we don't serve your breed around here!"
 #define MSG_NO_USED_WANDSTAFF	"I don't buy used up wands or staves!"
 #define MSG_CANT_KILL_KEEPER	"Get out of here before I call the guards!"
 
Index: src/races.c
===================================================================
--- src/races.c	(revision 0)
+++ src/races.c	(revision 0)
@@ -0,0 +1,117 @@
+/**************************************************************************
+ *  File: races.c                                      Extension of tbaMUD *
+ *  Usage: Source file for race-specific code                              *
+ *  Original Author: Brian Williams for CircleMUD                          *
+ *                                                                         *
+ *  All rights reserved.  See license.doc for complete information.        *
+ *                                                                         *
+ *  Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University *
+ *  CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.               *
+ *  Race patch updated for tbaMUD-3.60 by Xiuhtecuhtli on 10.14.09         *
+ ***************************************************************************/
+
+/** Help buffer the global variable definitions */
+#define __RACES_C__
+
+/* This file attempts to concentrate most of the code which must be changed
+ * in order for new races to be added.  If you're adding a new race, you
+ * should go through this entire file from beginning to end and add the
+ * appropriate new special cases for your new race. */
+
+#include "conf.h"
+#include "sysdep.h"
+#include "structs.h"
+#include "utils.h"
+#include "db.h"
+#include "spells.h"
+#include "interpreter.h"
+
+/* Names first */
+const char *race_abbrevs[] = {
+    "Hum",
+    "Elf",
+    "Gno",
+    "Dwa",
+    "Hlf",
+    "\n"
+};
+
+
+const char *pc_race_types[] = {
+    "Humanoid",
+    "Elf",
+    "Gnome",
+    "Dwarf",
+    "Halfling",
+    "\n"
+};
+
+/* The menu for choosing a race in interpreter.c: */
+const char *race_menu =
+    "\r\n"
+    "Select a race:\r\n"
+    "  [H] - Humanoid\r\n"
+    "  [E] - Elf\r\n"
+    "  [G] - Gnome\r\n"
+    "  [W] - Dwarf\r\n"
+    "  [L] - Halfling\r\n";
+
+/** Check if the class & race combo is allowed. */
+int classRaceAllowed[NUM_RACES][NUM_CLASSES] = {
+  /*  M    C    T    W                  */
+    { YES, YES, YES, YES }, /* Humanoid */
+    { YES, YES, YES, YES }, /* Elf      */
+    { YES, YES, NO,  YES }, /* Gnome    */
+    { NO,  YES, NO,  YES }, /* Dwarf    */
+    { NO,  YES, YES, YES }  /* Halfling */
+};
+
+/* The code to interpret a race letter -- used in interpreter.c when a new
+ * character is selecting a race and by 'set race' in act.wizard.c. */
+int parse_race(char arg)
+{
+    arg = LOWER(arg);
+
+    switch (arg)
+    {
+    case 'h': return RACE_HUMANOID;
+    case 'e': return RACE_ELF;
+    case 'g': return RACE_GNOME;
+    case 'w': return RACE_DWARF;
+    case 'l': return RACE_HALFLING;
+    default: return RACE_UNDEFINED;
+    }
+}
+
+/* bitvectors (i.e., powers of two) for each race, mainly for use in do_who
+ * and do_users.  Add new races at the end so that all races use sequential
+ * powers of two (1 << 0, 1 << 1, 1 << 2, 1 << 3, 1 << 4, 1 << 5, etc.) up to
+ * the limit of your bitvector_t, typically 0-31. */
+bitvector_t find_race_bitvector(const char *arg)
+{
+    size_t rpos, ret = 0;
+
+    for (rpos = 0; rpos < strlen(arg); rpos++)
+        ret |= (1 << parse_race(arg[rpos]));
+
+    return (ret);
+}
+
+/* invalid_race is used by handler.c to determine if a piece of equipment is
+ * usable by a particular race, based on the ITEM_ANTI_{race} bitvectors. */
+int invalid_race(struct char_data *ch, struct obj_data *obj)
+{
+    if (OBJ_FLAGGED(obj, ITEM_ANTI_HUMANOID) && IS_HUMANOID(ch))
+        return TRUE;
+    if (OBJ_FLAGGED(obj, ITEM_ANTI_ELF) && IS_ELF(ch))
+        return TRUE;
+    if (OBJ_FLAGGED(obj, ITEM_ANTI_GNOME) && IS_GNOME(ch))
+        return TRUE;
+    if (OBJ_FLAGGED(obj, ITEM_ANTI_DWARF) && IS_DWARF(ch))
+        return TRUE;
+    if (OBJ_FLAGGED(obj, ITEM_ANTI_HALFLING) && IS_HALFLING(ch))
+        return TRUE;
+
+    return FALSE;
+}
+

Property changes on: src/races.c
___________________________________________________________________
Added: svn:eol-style
   + native

Index: src/races.h
===================================================================
--- src/races.h	(revision 0)
+++ src/races.h	(revision 0)
@@ -0,0 +1,35 @@
+/**
+* @file races.h
+* Race Patch version 3.1
+*
+* Header file for race specific functions and variables. For a list of changes,
+* past authors, or instructions on patching this into your source code, check
+* out races.README.
+*
+* Extension of the tbaMUD source code distribution, which is a derivative
+* of, and continuation of, CircleMUD.
+*
+* All rights reserved.  See license for complete information.
+* Copyright (C) 1993, 94 by the Trustees of the Johns Hopkins University
+* CircleMUD is based on DikuMUD, Copyright (C) 1990, 1991.
+*
+*/
+#ifndef _RACES_H_
+#define _RACES_H_
+
+/* Functions available through class.c */
+bitvector_t find_race_bitvector(const char *arg);
+int invalid_race(struct char_data *ch, struct obj_data *obj);
+int parse_race(char arg);
+
+/* Global variables */
+
+#ifndef __RACES_C__
+extern const char *race_abbrevs[];
+extern const char *pc_race_types[];
+extern const char *race_menu;
+extern       int  classRaceAllowed[NUM_RACES][NUM_CLASSES];
+
+#endif /* __RACES_C__ */
+
+#endif /* _RACES_H_*/

Property changes on: src/races.h
___________________________________________________________________
Added: svn:eol-style
   + native

Index: src/util/plrtoascii.c
===================================================================
--- src/util/plrtoascii.c	(revision 18)
+++ src/util/plrtoascii.c	(working copy)
@@ -130,6 +130,7 @@ struct char_file_u_plrtoascii {
    char	title[MAX_TITLE_LENGTH+1];
    byte sex;
    byte chclass;
+   byte chrace;
    byte level;
    sh_int hometown;
    time_t birth;   /* Time of birth of character     */
@@ -208,6 +209,8 @@ void convert(char *filename)
       fprintf(outfile, "Sex : %d\n", (int)player.sex); 
     if (player.chclass != PFDEF_CLASS)
       fprintf(outfile, "Clas: %d\n", (int)player.chclass); 
+    if(player.chrace != PFDEF_RACE)
+      fprintf(outfile, "Race: %d\n", (int)player.chrace);
     if (player.level != PFDEF_LEVEL)
       fprintf(outfile, "Levl: %d\n", (int)player.level); 
     fprintf(outfile, "Brth: %d\n", (int)player.birth);
Index: src/act.other.c
===================================================================
--- src/act.other.c	(revision 18)
+++ src/act.other.c	(working copy)
@@ -27,6 +27,7 @@
 #include "act.h"
 #include "spec_procs.h"
 #include "class.h"
+#include "races.h"
 #include "fight.h"
 #include "mail.h"  /* for has_mail() */
 #include "shop.h"
@@ -346,8 +347,8 @@ static void print_group(struct char_data *ch)
     k = (ch->master ? ch->master : ch);
 
     if (AFF_FLAGGED(k, AFF_GROUP)) {
-      snprintf(buf, sizeof(buf), "     [%3dH %3dM %3dV] [%2d %s] $N (Head of group)",
-	      GET_HIT(k), GET_MANA(k), GET_MOVE(k), GET_LEVEL(k), CLASS_ABBR(k));
+      snprintf(buf, sizeof(buf), "     [%3dH %3dM %3dV] [%2d %s %s] $N (Head of group)",
+	      GET_HIT(k), GET_MANA(k), GET_MOVE(k), GET_LEVEL(k), RACE_ABBR(k), CLASS_ABBR(k));
       act(buf, FALSE, ch, 0, k, TO_CHAR);
     }
 
@@ -355,9 +356,9 @@ static void print_group(struct char_data *ch)
       if (!AFF_FLAGGED(f->follower, AFF_GROUP))
 	continue;
 
-      snprintf(buf, sizeof(buf), "     [%3dH %3dM %3dV] [%2d %s] $N", GET_HIT(f->follower),
+      snprintf(buf, sizeof(buf), "     [%3dH %3dM %3dV] [%2d %s %s] $N", GET_HIT(f->follower),
 	      GET_MANA(f->follower), GET_MOVE(f->follower),
-	      GET_LEVEL(f->follower), CLASS_ABBR(f->follower));
+	      GET_LEVEL(f->follower), RACE_ABBR(f->follower), CLASS_ABBR(f->follower));
       act(buf, FALSE, ch, 0, f->follower, TO_CHAR);
     }
   }
Index: src/pfdefaults.h
===================================================================
--- src/pfdefaults.h	(revision 18)
+++ src/pfdefaults.h	(working copy)
@@ -15,6 +15,7 @@
 
 #define PFDEF_SEX		0
 #define PFDEF_CLASS		0
+#define PFDEF_RACE		0
 #define PFDEF_LEVEL		0
 #define PFDEF_HEIGHT		0
 #define PFDEF_WEIGHT		0
Index: src/dg_variables.c
===================================================================
--- src/dg_variables.c	(revision 18)
+++ src/dg_variables.c	(working copy)
@@ -23,6 +23,7 @@
 #include "spells.h"
 #include "oasis.h"
 #include "class.h"
+#include "races.h"
 #include "quest.h"
 
 /* Utility functions */
@@ -887,7 +888,9 @@ void find_replacement(void *go, struct script_data
              } 
           break;
         case 'r':
-          if (!str_cmp(field, "room")) {  /* in NOWHERE, return the void */
+          if (!str_cmp(field, "race"))
+            sprinttype(GET_RACE(c), pc_race_types, str, slen);
+          else if (!str_cmp(field, "room")) {  /* in NOWHERE, return the void */
 /* see note in dg_scripts.h */
 #ifdef ACTOR_ROOM_IS_UID
             snprintf(str, slen, "%c%ld",UID_CHAR,
