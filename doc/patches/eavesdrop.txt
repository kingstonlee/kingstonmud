From: ";P" <siv@CYBERENET.NET>
Subject: New Skill

Here's a new skill for thieves and the like..it allows them to eavesdrop on an adjacent room...

Note: this has been updated and fixed to work on tbaMUD 3.64.

1.) open structs.h and add the following:

  struct obj_data *contents;  /**< List of items in room */
  struct char_data *people;   /**< List of NPCs / PCs in room */

+  struct char_data *listening; /**< Who is Eavesdropping? */

  struct list_data * events;

2.) And further down... in the char_data struct...

  struct char_data *master;      /**< List of character being followed */

  struct group_data *group;      /**< Character's Group */

+  struct char_data *next_listener; /** Used in Eavesdropping */
+  sh_int listening_to; /** Eavesdropping */


  long pref; /**< unique session id */

3.) Prototype it! Open up spells.h and at the end of the list of #defines for skills add...

#define SKILL_SNEAK                 138 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_STEAL                 139 /* Reserved Skill[] DO NOT CHANGE */
#define SKILL_TRACK		            140 /* Reserved Skill[] DO NOT CHANGE */
+#define SKILL_EAVESDROP             141

4.) Open up class.c and add...

  spell_level(SKILL_SNEAK, CLASS_THIEF, 1);
  spell_level(SKILL_PICK_LOCK, CLASS_THIEF, 2);
  spell_level(SKILL_BACKSTAB, CLASS_THIEF, 3);
  spell_level(SKILL_STEAL, CLASS_THIEF, 4);
  spell_level(SKILL_HIDE, CLASS_THIEF, 5);
+  spell_level(SKILL_EAVESDROP, CLASS_THIEF, 7);

5.) Now open up interpreter.c and make the following additions...

  { "eat"      , "ea"      , POS_RESTING , do_eat      , 0, SCMD_EAT },
+  { "eavesdrop", "eave"     , POS_STANDING, do_eavesdrop, 1, 0 },
  { "echo"     , "ec"      , POS_SLEEPING, do_echo     , LVL_IMMORT, SCMD_ECHO },
  { "emote"    , "em"      , POS_RESTING , do_echo     , 0, SCMD_EMOTE },

...

  char arg[MAX_INPUT_LENGTH];
+  struct char_data *temp;

  REMOVE_BIT_AR(AFF_FLAGS(ch), AFF_HIDE);

+ // Eavesdrop skill
+  if (ch->listening_to) {
+    REMOVE_FROM_LIST(ch, world[ch->listening_to].listening, next_listener);
+    ch->listening_to = 0;
+  }

6.) Next you'll want to open act.other.c, or any other act.x.c file you feel is appropriate for a skill like this.  Add in the following ACMD, but make sure you don't stick it in another ACMD.

+ // Adding Eavesdrop Skill here. Allows one to hear activity in another room.
+ACMD(do_eavesdrop) {
+  int dir, percent, prob;
+  char buf[MAX_STRING_LENGTH];
+  one_argument(argument, buf);
+
+  if (!*buf) {
+    send_to_char(ch, "In which direction would you like to eavesdrop?\r\n");
+    return;
+  }
+  if ((dir = search_block(buf, dirs, FALSE)) < 0) {
+    send_to_char(ch, "Which directions is that?\r\n");
+    return;
+  }
+    /* 101% is a complete failure */
+   percent = rand_number(1, 101);
+   prob = GET_SKILL(ch, SKILL_SPY);
+   if (percent > percent) {
+       send_to_char(ch, "You try to listen to what is happening +over there, but fail to hear anything.\r\n");
+       return; }
+     else
+       send_to_char(ch, "You strain your ears to listen...\r\n");
+
+  if (EXIT(ch, dir)) {
+    if (IS_SET(EXIT(ch, dir)->exit_info, EX_CLOSED) && EXIT(ch, dir)->keyword)
+{
+      sprintf(buf, "The %s is closed.\r\n", fname(EXIT(ch, dir)->keyword));
+      send_to_char(ch, buf);
+    } else {
+      ch->next_listener = world[EXIT(ch, dir)->to_room].listening;
+      world[EXIT(ch, dir)->to_room].listening = ch;
+      ch->listening_to = EXIT(ch, dir)->to_room;
+    }
+  } else
+    send_to_char(ch, "There is not a room there...\r\n");
+}

7.) More prototyping!  If you don't do this, then it won't show the actual skill name when you type prac. Instead it'll just show something like !UNUSED!.  Can't have that.  Open up spell_parser.c and add the following.

  skillo(SKILL_SNEAK, "sneak");
  skillo(SKILL_STEAL, "steal");
  skillo(SKILL_TRACK, "track");
  skillo(SKILL_WHIRLWIND, "whirlwind");
+  skillo(SKILL_EAVESDROP, "eavesdrop");


8.) Open up comm.c, time to make some changes/additions there.  First off, find the send_to_room function and replace it *completely* with the following... (or comment out the old one just in case something happens and you need to refer/use it later)

void send_to_room(room_rnum room, const char *messg, ...)
{
  struct char_data *i;
  char buf[MAX_STRING_LENGTH];


  if (messg) {
    for (i = world[room].people; i; i = i->next_in_room)
      if (i->desc)
        write_to_output(i->desc, messg);
    for (i = world[room].listening; i; i = i->next_listener)
      if (i->desc) {
/*  the ------'s are used to differentiate eavesdropped stuff from
 *  the stuff that is happening in the same room as the char..
 *  looks like:
 *  -------
 *  john dropped a sword
 *  ------
 */
        sprintf(buf, "----------\r\n%s----------\r\n", messg);
        write_to_output(i->desc, buf);
      }
  }
}

9.) There's one last thing to add to comm.c and it is the following... find the char *act( function and make the following changes.

  struct char_data *to;
  int to_sleeping;
+  struct char_data *eavesdropper;

  if (!str || !*str)
    return NULL;

...

    if (hide_invisible && ch && !CAN_SEE(to, ch))
      continue;
    if (type != TO_ROOM && to == vict_obj)
      continue;
    perform_act(str, ch, obj, vict_obj, to);
  }

+  /* ADD EAVESDROP STUFF HERE: */
+
+  /* Send action to any eavesdroppers in neighboring rooms */
+  for (eavesdropper = world[ch->in_room].listening; eavesdropper;
+       eavesdropper = eavesdropper->next_listener) {
+    if (eavesdropper->desc) {
+      /*  the ------'s are used to differentiate eavesdropped stuff from
+       *  the stuff that is happening in the same room as the char..
+       *  looks like:
+       *  -------
+       *  john dropped a sword
+       *  ------
+       */
+      write_to_output(eavesdropper->desc, "----------\r\n");
+      perform_act(str, ch, obj, vict_obj, eavesdropper);
+      write_to_output(eavesdropper->desc, "----------\r\n");
+    }
+  }

  return last_act_message;

10.) Compile, run, test, and enjoy!