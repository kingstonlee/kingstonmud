diff -BbuprN -x '*.o' -x conf.h /home/mud/suntzu/src/act.informative.c /home/mud/yoda/src/act.informative.c
--- /home/mud/suntzu/src/act.informative.c	2004-01-19 02:20:47.000000000 +0200
+++ /home/mud/yoda/src/act.informative.c	2004-02-20 10:21:58.000000000 +0200
@@ -55,6 +55,7 @@ int compute_armor_class(struct char_data
 struct obj_data *find_vehicle_by_vnum(int vnum);
 extern struct obj_data *get_obj_in_list_type(int type, struct obj_data *list);
 void view_room_by_rnum(struct char_data * ch, int is_in);
+int check_disabled(const struct command_info *command);
 
 /* local functions */
 int sort_commands_helper(const void *a, const void *b);
@@ -2159,7 +2160,15 @@ ACMD(do_commands)
     if (!wizhelp && socials != (complete_cmd_info[i].command_pointer == do_action || complete_cmd_info[i].command_pointer == do_insult))
       continue;
 
-    send_to_char(ch, "%-11s%s", complete_cmd_info[i].command, no++ % 7 == 0 ? "\r\n" : "");
+//    send_to_char(ch, "%-11s%s", complete_cmd_info[i].command, no++ % 7 == 0 ? "\r\n" : "");
+
+     if (check_disabled(&complete_cmd_info[i]))
+      sprintf(arg, "(%s)", complete_cmd_info[i].command);
+    else  
+      sprintf(arg, "%s", complete_cmd_info[i].command);
+
+    send_to_char(ch, "%-11s%s", arg, no++ % 7 == 0 ? "\r\n" : "");
+
   }
 
   if (no % 7 != 1)
diff -BbuprN -x '*.o' -x conf.h /home/mud/suntzu/src/comm.c /home/mud/yoda/src/comm.c
--- /home/mud/suntzu/src/comm.c	2004-01-25 02:52:26.000000000 +0200
+++ /home/mud/yoda/src/comm.c	2004-02-20 09:58:59.000000000 +0200
@@ -395,6 +395,7 @@ int main(int argc, char **argv)
     free_help();		/* db.c */
     Free_Invalid_List();	/* ban.c */
     free_strings(&config_info, OASIS_CFG); /* oasis_delete.c */
+    free_disabled();    /* interpreter.c */
   }
 
   log("Done.");
diff -BbuprN -x '*.o' -x conf.h /home/mud/suntzu/src/config.c /home/mud/yoda/src/config.c
--- /home/mud/suntzu/src/config.c	2004-01-19 02:20:47.000000000 +0200
+++ /home/mud/yoda/src/config.c	2004-02-20 10:28:44.000000000 +0200
@@ -369,7 +369,7 @@ int auto_save_olc = 1;
  * This will make the mud look for a file called socials.new,
  * which is in a different format than the stock socials file.
  */
-int use_new_socials = 0;
+int use_new_socials = 1;
 
 const char *MENU =
 "\r\n"
diff -BbuprN -x '*.o' -x conf.h /home/mud/suntzu/src/db.c /home/mud/yoda/src/db.c
--- /home/mud/suntzu/src/db.c	2004-01-31 23:01:37.000000000 +0200
+++ /home/mud/yoda/src/db.c	2004-02-20 09:59:26.000000000 +0200
@@ -332,6 +332,9 @@ void boot_world(void)
   log("Renumbering zone table.");
   renum_zone_table();
 
+  log("Loading disabled commands list...");
+  load_disabled();
+
   if(converting) {
     log("Saving 128bit worldfiles to disk.");
 	save_all();
diff -BbuprN -x '*.o' -x conf.h /home/mud/suntzu/src/db.h /home/mud/yoda/src/db.h
--- /home/mud/suntzu/src/db.h	2004-01-26 03:44:54.000000000 +0200
+++ /home/mud/yoda/src/db.h	2004-02-20 10:11:12.000000000 +0200
@@ -133,6 +133,9 @@ void	free_extra_descriptions(struct extr
 void	free_text_files(void);
 void	free_player_index(void);
 void	free_help(void);
+void load_disabled(void);
+void save_disabled(void);
+void free_disabled(void);
 
 zone_rnum real_zone(zone_vnum vnum);
 room_rnum real_room(room_vnum vnum);
@@ -297,3 +300,22 @@ extern int top_of_socialt;
 void strip_string(char *buffer);
 int read_xap_objects(FILE *fl,struct char_data *ch);
 
+/* For disabled commands code by Erwin S. Andreasen, */
+/* ported to CircleMUD by Myrdred (Alexei Svitkine)  */
+
+#define DISABLED_FILE    "disabled.cmds"  /* disabled commands */
+#define END_MARKER    "END" /* for load_disabled() and save_disabled() */
+
+typedef struct disabled_data DISABLED_DATA;
+
+extern DISABLED_DATA *disabled_first; /* interpreter.c */
+
+/* one disabled command */
+struct disabled_data {
+       DISABLED_DATA *next;                /* pointer to next node          */
+       struct command_info const *command; /* pointer to the command struct */
+       char *disabled_by;                  /* name of disabler              */
+       sh_int level;                       /* level of disabler             */
+       int subcmd;                         /* the subcmd, if any            */
+};
+
diff -BbuprN -x '*.o' -x conf.h /home/mud/suntzu/src/interpreter.c /home/mud/yoda/src/interpreter.c
--- /home/mud/suntzu/src/interpreter.c	2004-01-29 05:25:00.000000000 +0200
+++ /home/mud/yoda/src/interpreter.c	2004-02-20 10:20:23.000000000 +0200
@@ -29,6 +29,9 @@
 #include "dg_scripts.h"
 #include "constants.h"
 
+/* local global variables */
+DISABLED_DATA *disabled_first = NULL;
+
 /* external variables */
 extern room_rnum r_mortal_start_room;
 extern room_rnum r_immort_start_room;
@@ -73,6 +76,7 @@ void perform_complex_alias(struct txt_q 
 int perform_alias(struct descriptor_data *d, char *orig, size_t maxlen);
 int reserved_word(char *argument);
 int _parse_name(char *arg, char *name);
+int check_disabled(const struct command_info *command);
 
 /* prototypes for all do_x functions. */
 ACMD(do_action);
@@ -99,6 +103,7 @@ ACMD(do_credits);
 ACMD(do_date);
 ACMD(do_dc);
 ACMD(do_diagnose);
+ACMD(do_disable);
 ACMD(do_dig);
 ACMD(do_disarm);
 ACMD(do_display);
@@ -331,6 +336,7 @@ cpp_extern const struct command_info cmd
   { "dc"       , "dc"	, POS_DEAD    , do_dc       , LVL_GOD, 0 },
   { "deposit"  , "depo"	, POS_STANDING, do_not_here , 1, 0 },
   { "diagnose" , "diag"	, POS_RESTING , do_diagnose , 0, 0 },
+  { "disable"  , "disa"   ,POS_DEAD    , do_disable  , LVL_GRGOD, 0 },
   { "dig"      , "dig"	, POS_DEAD    , do_dig      , LVL_BUILDER, 0 },
   { "disarm"   , "dis"	, POS_STANDING, do_disarm   , 0, 0 },
   { "display"  , "disp"	, POS_DEAD    , do_display  , 0, 0 },
@@ -667,6 +673,8 @@ void command_interpreter(struct char_dat
 
   if (*complete_cmd_info[cmd].command == '\n')
     send_to_char(ch, "Huh?!?\r\n");
+  else if (check_disabled(&complete_cmd_info[cmd]))    /* is it disabled? */
+      send_to_char(ch, "This command has been temporarily disabled.\r\n");
   else if (!IS_NPC(ch) && PLR_FLAGGED(ch, PLR_FROZEN) && GET_LEVEL(ch) < LVL_IMPL)
     send_to_char(ch, "You try, but the mind-numbing cold prevents you...\r\n");
   else if (complete_cmd_info[cmd].command_pointer == NULL)
@@ -2010,3 +2018,180 @@ void nanny(struct descriptor_data *d, ch
   }
 }
 
+/*
+ * Code to disable or enable buggy commands on the run, saving
+ * a list of disabled commands to disk. Originally created by
+ * Erwin S. Andreasen (erwin@andreasen.org) for Merc. Ported to
+ * CircleMUD by Alexei Svitkine (Myrdred), isvitkin@sympatico.ca.
+ *
+ * Syntax is:
+ *   disable - shows disabled commands
+ *   disable <command> - toggles disable status of command
+ * 
+ */
+
+ACMD(do_disable)
+{
+  int i, length;
+  DISABLED_DATA *p, *temp;
+
+  if (IS_NPC(ch)) {
+    send_to_char(ch, "Monsters can't disable commands, silly.\r\n");
+    return;
+  }
+
+  skip_spaces(&argument);
+
+  if (!*argument) { /* Nothing specified. Show disabled commands. */
+    if (!disabled_first) /* Any disabled at all ? */
+      send_to_char(ch, "There are no disabled commands.\r\n");
+    else {
+      send_to_char(ch,
+        "Commands that are currently disabled:\r\n\r\n"
+        " Command       Disabled by     Level\r\n"
+        "-----------   --------------  -------\r\n");
+      for (p = disabled_first; p; p = p->next)
+        send_to_char(ch, " %-12s   %-12s    %3d\r\n", p->command->command, p->disabled_by, p->level);
+    }
+    return;
+  }
+
+  /* command given - first check if it is one of the disabled commands */
+  for (length = strlen(argument), p = disabled_first; p ;  p = p->next)
+    if (!strncmp(argument, p->command->command, length))
+    break;
+        
+  if (p) { /* this command is disabled */
+
+    /* Was it disabled by a higher level imm? */
+    if (GET_LEVEL(ch) < p->level) {
+      send_to_char(ch, "This command was disabled by a higher power.\r\n");
+      return;
+    }
+
+    REMOVE_FROM_LIST(p, disabled_first, next);
+    send_to_char(ch, "Command '%s' enabled.\r\n", p->command->command);
+    mudlog(BRF, LVL_IMMORT, TRUE, "(GC) %s has enabled the command '%s'.",
+      GET_NAME(ch), p->command->command);
+    free(p->disabled_by);
+    free(p);
+    save_disabled(); /* save to disk */
+
+  } else { /* not a disabled command, check if the command exists */
+
+    for (length = strlen(argument), i = 0; *cmd_info[i].command != '\n'; i++)
+      if (!strncmp(cmd_info[i].command, argument, length))
+        if (GET_LEVEL(ch) >= cmd_info[i].minimum_level)
+          break;
+
+    /*  Found?     */            
+    if (*cmd_info[i].command == '\n') {
+      send_to_char(ch, "You don't know of any such command.\r\n");
+      return;
+    }
+
+    if (!strcmp(cmd_info[i].command, "disable")) {
+      send_to_char (ch, "You cannot disable the disable command.\r\n");
+      return;
+    }
+
+    /* Disable the command */
+    CREATE(p, struct disabled_data, 1);
+    p->command = &cmd_info[i];
+    p->disabled_by = strdup(GET_NAME(ch)); /* save name of disabler  */
+    p->level = GET_LEVEL(ch);           /* save level of disabler */    
+    p->subcmd = cmd_info[i].subcmd;       /* the subcommand if any  */    
+    p->next = disabled_first;
+    disabled_first = p; /* add before the current first element */
+    send_to_char(ch, "Command '%s' disabled.\r\n", p->command->command);
+    mudlog(BRF, LVL_IMMORT, TRUE, "(GC) %s has disabled the command '%s'.",
+      GET_NAME(ch), p->command->command);
+    save_disabled(); /* save to disk */
+  }
+}
+
+/* check if a command is disabled */   
+int check_disabled(const struct command_info *command)
+{
+  DISABLED_DATA *p;
+
+  for (p = disabled_first; p ; p = p->next)
+    if (p->command->command_pointer == command->command_pointer)
+      if (p->command->subcmd == command->subcmd)
+        return TRUE;
+
+  return FALSE;
+}
+
+/* Load disabled commands */
+void load_disabled()
+{
+  FILE *fp;
+  DISABLED_DATA *p;
+  int i;
+  char line[READ_SIZE], name[MAX_INPUT_LENGTH], temp[MAX_INPUT_LENGTH];
+
+  if (disabled_first)
+    free_disabled();
+
+  if ((fp = fopen(DISABLED_FILE, "r")) == NULL)
+    return; /* No disabled file.. no disabled commands. */
+
+  while (get_line(fp, line)) { 
+    if (!str_cmp(line, END_MARKER))
+      break; /* break loop if we encounter the END_MARKER */
+    CREATE(p, struct disabled_data, 1);
+    sscanf(line, "%s %d %hd %s", name, &(p->subcmd), &(p->level), temp);
+    /* Find the command in the table */
+    for (i = 0; *cmd_info[i].command != '\n'; i++)
+      if (!str_cmp(cmd_info[i].command, name))
+        break;
+    if (*cmd_info[i].command == '\n') { /* command does not exist? */
+      log("WARNING: load_disabled(): Skipping unknown disabled command - '%s'!", name);
+      free(p);
+    } else { /* add new disabled command */
+      p->disabled_by = strdup(temp);
+      p->command = &cmd_info[i];
+      p->next = disabled_first;
+      disabled_first = p;
+    }
+  }
+  fclose(fp);
+}
+
+/* Save disabled commands */
+void save_disabled()
+{
+  FILE *fp;
+  DISABLED_DATA *p;
+
+  if (!disabled_first) {
+    /* delete file if no commands are disabled */
+    unlink(DISABLED_FILE);
+    return;
+   }
+
+  if ((fp = fopen(DISABLED_FILE, "w")) == NULL) {
+    log("SYSERR: Could not open " DISABLED_FILE " for writing");
+    return;
+  }
+
+  for (p = disabled_first; p ; p = p->next)
+    fprintf (fp, "%s %d %d %s\n", p->command->command, p->subcmd, p->level, p->disabled_by);
+  fprintf(fp, "%s\n", END_MARKER);
+  fclose(fp);
+}
+  
+/* free all disabled commands from memory */
+void free_disabled()
+{
+  DISABLED_DATA *p;
+
+  while (disabled_first) {
+    p = disabled_first;
+    disabled_first = disabled_first->next;
+    free(p->disabled_by);
+    free(p);
+  }
+}
+
